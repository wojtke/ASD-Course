class Solution:
    def vp(self, s, i, j):
        if self.F[i][j]!=None:
            return self.F[i][j]
            return self.F[i][j]
        elif i==j:
            self.F[i][j] = True
            return self.F[i][j]
        elif (j-i)%2==1:
            self.F[i][j] = False
            return self.F[i][j]
        elif s[i]=="(" and s[j-1]==")" and self.vp(s, i+1, j-1):
            self.F[i][j] = True
            return self.F[i][j]
        else:
            k = i+2
            while k<j-1:
                if self.vp(s, i, k) and self.vp(s, k, j):
                    self.F[i][j] = True
                    return self.F[i][j]
                k+=2

        self.F[i][j] = False   
        return self.F[i][j]
        
    def longestValidParentheses(self, s: str) -> int:
        n = len(s)
        self.F = [[None]*(n+1) for _ in range(n+1)]

        for x in range(n - n%2, -1, -1):
            for i in range(n-x+1):
                if self.vp(s, i, i+x):
                    return x, self.F


s = Solution()
txt

a, F= s.longestValidParentheses(txt)
print(a)
